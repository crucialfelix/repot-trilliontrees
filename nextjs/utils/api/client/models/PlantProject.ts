/* tslint:disable */
/* eslint-disable */
/**
 * Trillion Trees Campaign
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PlantProjectAllOf,
    PlantProjectAllOfFromJSON,
    PlantProjectAllOfFromJSONTyped,
    PlantProjectAllOfToJSON,
    PlantProjectAllOfTpoData,
    PlantProjectAllOfTpoDataFromJSON,
    PlantProjectAllOfTpoDataFromJSONTyped,
    PlantProjectAllOfTpoDataToJSON,
    PlantProjectAllOfTreeCountOptions,
    PlantProjectAllOfTreeCountOptionsFromJSON,
    PlantProjectAllOfTreeCountOptionsFromJSONTyped,
    PlantProjectAllOfTreeCountOptionsToJSON,
    PlantProjectImage,
    PlantProjectImageFromJSON,
    PlantProjectImageFromJSONTyped,
    PlantProjectImageToJSON,
    PlantProjectSummary,
    PlantProjectSummaryFromJSON,
    PlantProjectSummaryFromJSONTyped,
    PlantProjectSummaryToJSON,
} from './';

/**
 * 
 * @export
 * @interface PlantProject
 */
export interface PlantProject extends PlantProjectSummary {
    /**
     * 
     * @type {string}
     * @memberof PlantProject
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantProject
     */
    geoLocation?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantProject
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantProject
     */
    linkText?: string;
    /**
     * 
     * @type {Array<PlantProjectImage>}
     * @memberof PlantProject
     */
    plantProjectImages?: Array<PlantProjectImage>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlantProject
     */
    plantProjectSites?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PlantProject
     */
    videoUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof PlantProject
     */
    tpoId?: number;
    /**
     * 
     * @type {PlantProjectAllOfTpoData}
     * @memberof PlantProject
     */
    tpoData?: PlantProjectAllOfTpoData;
    /**
     * 
     * @type {string}
     * @memberof PlantProject
     */
    imageFile?: string;
    /**
     * 
     * @type {object}
     * @memberof PlantProject
     */
    paymentSetup?: object;
    /**
     * 
     * @type {PlantProjectAllOfTreeCountOptions}
     * @memberof PlantProject
     */
    treeCountOptions?: PlantProjectAllOfTreeCountOptions;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof PlantProject
     */
    reviews?: Array<{ [key: string]: object; }>;
    /**
     * 
     * @type {number}
     * @memberof PlantProject
     */
    position?: number;
    /**
     * 
     * @type {string}
     * @memberof PlantProject
     */
    synopsis1?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantProject
     */
    synopsis2?: string;
    /**
     * 
     * @type {number}
     * @memberof PlantProject
     */
    countRegistered?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantProject
     */
    countDonated?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantProject
     */
    geoLongitude?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantProject
     */
    geoLatitude?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PlantProject
     */
    isVerified?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PlantProject
     */
    isPublished?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PlantProject
     */
    isCertified?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PlantProject
     */
    isActive?: boolean;
    /**
     * ISO8601 date time
     * @type {string}
     * @memberof PlantProject
     */
    created?: string;
}

export function PlantProjectFromJSON(json: any): PlantProject {
    return PlantProjectFromJSONTyped(json, false);
}

export function PlantProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlantProject {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...PlantProjectSummaryFromJSONTyped(json, ignoreDiscriminator),
        'location': !exists(json, 'location') ? undefined : json['location'],
        'geoLocation': !exists(json, 'geoLocation') ? undefined : json['geoLocation'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'linkText': !exists(json, 'linkText') ? undefined : json['linkText'],
        'plantProjectImages': !exists(json, 'plantProjectImages') ? undefined : ((json['plantProjectImages'] as Array<any>).map(PlantProjectImageFromJSON)),
        'plantProjectSites': !exists(json, 'plantProjectSites') ? undefined : json['plantProjectSites'],
        'videoUrl': !exists(json, 'videoUrl') ? undefined : json['videoUrl'],
        'tpoId': !exists(json, 'tpoId') ? undefined : json['tpoId'],
        'tpoData': !exists(json, 'tpoData') ? undefined : PlantProjectAllOfTpoDataFromJSON(json['tpoData']),
        'imageFile': !exists(json, 'imageFile') ? undefined : json['imageFile'],
        'paymentSetup': !exists(json, 'paymentSetup') ? undefined : json['paymentSetup'],
        'treeCountOptions': !exists(json, 'treeCountOptions') ? undefined : PlantProjectAllOfTreeCountOptionsFromJSON(json['treeCountOptions']),
        'reviews': !exists(json, 'reviews') ? undefined : json['reviews'],
        'position': !exists(json, 'position') ? undefined : json['position'],
        'synopsis1': !exists(json, 'synopsis1') ? undefined : json['synopsis1'],
        'synopsis2': !exists(json, 'synopsis2') ? undefined : json['synopsis2'],
        'countRegistered': !exists(json, 'countRegistered') ? undefined : json['countRegistered'],
        'countDonated': !exists(json, 'countDonated') ? undefined : json['countDonated'],
        'geoLongitude': !exists(json, 'geoLongitude') ? undefined : json['geoLongitude'],
        'geoLatitude': !exists(json, 'geoLatitude') ? undefined : json['geoLatitude'],
        'isVerified': !exists(json, 'isVerified') ? undefined : json['isVerified'],
        'isPublished': !exists(json, 'isPublished') ? undefined : json['isPublished'],
        'isCertified': !exists(json, 'isCertified') ? undefined : json['isCertified'],
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
        'created': !exists(json, 'created') ? undefined : json['created'],
    };
}

export function PlantProjectToJSON(value?: PlantProject | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...PlantProjectSummaryToJSON(value),
        'location': value.location,
        'geoLocation': value.geoLocation,
        'description': value.description,
        'linkText': value.linkText,
        'plantProjectImages': value.plantProjectImages === undefined ? undefined : ((value.plantProjectImages as Array<any>).map(PlantProjectImageToJSON)),
        'plantProjectSites': value.plantProjectSites,
        'videoUrl': value.videoUrl,
        'tpoId': value.tpoId,
        'tpoData': PlantProjectAllOfTpoDataToJSON(value.tpoData),
        'imageFile': value.imageFile,
        'paymentSetup': value.paymentSetup,
        'treeCountOptions': PlantProjectAllOfTreeCountOptionsToJSON(value.treeCountOptions),
        'reviews': value.reviews,
        'position': value.position,
        'synopsis1': value.synopsis1,
        'synopsis2': value.synopsis2,
        'countRegistered': value.countRegistered,
        'countDonated': value.countDonated,
        'geoLongitude': value.geoLongitude,
        'geoLatitude': value.geoLatitude,
        'isVerified': value.isVerified,
        'isPublished': value.isPublished,
        'isCertified': value.isCertified,
        'isActive': value.isActive,
        'created': value.created,
    };
}


